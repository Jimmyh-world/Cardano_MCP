name: Cardano MCP CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Global environment variables used across all jobs
env:
  NODE_VERSION: '18.x' # Current LTS version
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: cardano_mcp_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  NODE_ENV: test

jobs:
  # Quality gate checks (quick validations)
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper linting of commits

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript types
        run: npm run check-types

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format -- --check

      - name: Check commit message format
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  # Build and test
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build artifacts are missing!"
            exit 1
          fi

  # Completely separate security scan that doesn't block the pipeline
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ false }} # Temporarily disabled
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          config-file: ./.github/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Success notification - only depends on quality gates
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: success()
    steps:
      - name: Set Pipeline Status
        run: echo "Core pipeline completed successfully"
